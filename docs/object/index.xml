<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Object system on Mach: zig game engine &amp; graphics toolkit</title><link>https://machengine.org/docs/object/</link><description>Recent content in Object system on Mach: zig game engine &amp; graphics toolkit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/docs/object/index.xml" rel="self" type="application/rss+xml"/><item><title>Object system: modules</title><link>https://machengine.org/docs/object/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/docs/object/modules/</guid><description>Object system: modules Mach modules are a key concept of the Mach object system. Mach modules (not to be confused with Zig modules, although they are very similar) are the &amp;lsquo;building blocks&amp;rsquo; used to organize everything in Mach itself, as well as in your own application. You can pick and choose which modules your program uses, import third-party libraries that provide modules, etc.
Examples of modules: a physics engine, a 2D sprite renderer, a text renderer, a scene manager, your application&amp;rsquo;s main logic, etc.</description></item><item><title>Object system: objects</title><link>https://machengine.org/docs/object/objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/docs/object/objects/</guid><description>Object system: objects Mach objects are a key concept of the Mach object system and are used to represent everything from virtual objects like textures and shaders, to visual in-game objects and more!
Declaring objects Objects are declared just like a modules&amp;rsquo; global state fields - the only difference is the data type of the struct field. For example, here is a dynamically-sized list of monster objects where each monster can have health and damage values:</description></item><item><title>Object system: relations</title><link>https://machengine.org/docs/object/relations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/docs/object/relations/</guid><description>Object system: relations Mach object relations are a key concept of the Mach object system and enable you to arbitrarily create parent-child relations between objects.
Among other things, this allows for attaching your own arbitrary data to someone else&amp;rsquo;s object - a form of relaxed type constraint which enable you to quickly iterate on your codebase. *Mach&amp;rsquo;s object system is not an Entity Component System (it&amp;rsquo;s better!), but ECS typically enables this form of relaxed type constraint to enable fast iteration - and object relations are how we provide this flexibility.</description></item><item><title>Object system: systems</title><link>https://machengine.org/docs/object/systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/docs/object/systems/</guid><description>Object system: systems Mach systems are a key concept of the Mach object system. Systems are functions, or a list of systems (functions), that could be run if desired.
Declaring systems To declare a system, one simply needs to add the name of the system to a pub const mach_systems list in the module:
pub const mach_module = .foo; // ... pub const mach_systems = .{ .init, .tick, .deinit }; The names written in this list (.</description></item></channel></rss>