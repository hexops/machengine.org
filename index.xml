<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mach on Mach: zig game engine &amp; graphics toolkit</title><link>https://machengine.org/</link><description>Recent content in Mach on Mach: zig game engine &amp; graphics toolkit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/index.xml" rel="self" type="application/rss+xml"/><item><title>C packages</title><link>https://machengine.org/pkg/c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/c/</guid><description>C libraries &amp;amp; headers packaged via the Zig build system Mach provides an ecosystem of C libraries via the Zig package manager.
These aren’t Zig bindings to these libraries (which we have separately), but instead are just forks of the actual project with their build system replaced by build.zig so you can depend on them and build them using the Zig package manager.
Pure forks with build.zig:
brotli harfbuzz freetype glfw basisu opus opusfile opusenc flac ogg spirv-tools spirv-cross Header packages:</description></item><item><title>Coordinate system</title><link>https://machengine.org/engine/math/coordinate-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/math/coordinate-system/</guid><description>Coordinate system This page briefly covers Mach&amp;rsquo;s coordinate systems; then it delves into traversing coordinate systems explaining at a high-level (and with very minimal maths) how e.g. a polygon in a 3D model in the scene goes through a bunch of coordinate system transforms before finally ending up as a pixel on the screen.
You don&amp;rsquo;t have to read this whole page, but it might be worth skimming and taking a look at the diagrams!</description></item><item><title>Core examples</title><link>https://machengine.org/core/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/core/examples/</guid><description>Mach core examples All examples require this Zig nightly version | known issues deferred-rendering Dynamic lighting using deferred rendering techniques.
git clone https://github.com/hexops/mach-core cd mach-core/ zig build run-deferred-rendering ~1300 lines of code pbr-basic Physically based rendering (PBR) materials
git clone https://github.com/hexops/mach-core cd mach-core/ zig build run-pbr-basic ~1000 lines of code gen-texture-light Generates a brick texture at comptime, uses Blinn-Phong lighting, and several pipelines. Move camera with arrow keys / WASD.</description></item><item><title>Discord community</title><link>https://machengine.org/discord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/discord/</guid><description>Redirecting you to https://discord.gg/XNG3NZgCqp</description></item><item><title>Engine modularity</title><link>https://machengine.org/engine/modularity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/modularity/</guid><description>Modularity Historically, we believe there are three types of approaches to game development:
Description Opinionated? Modularity? Note Libraries Not at all Extremely No natural interoperability, lots of glue code required Frameworks Somewhat Very Often unable to provide high-level experiences due to modularity Engines Extremely Not at all Provides high-level experiences but makes rigid choices on your behalf The Mach project provides some Libraries, but mostly aims to sit between Frameworks and Engines.</description></item><item><title>Engine roadmap</title><link>https://machengine.org/engine/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/roadmap/</guid><description>Engine roadmap There is a long road ahead: it&amp;rsquo;s going to require a lot of work and time to get to where we are going.
We&amp;rsquo;ve been working on Mach for ~2 years now, primarily building out the Zig gamedev ecosystem, building foundational packages that we needed for Mach core, and as a result we&amp;rsquo;ve really just broken ground on the engine side of things.
Development is fairly linear, but developments that you see aren&amp;rsquo;t linear, we were focused on more foundational things before - but today we&amp;rsquo;re actively focused on higher-level APIs which will have more profound impacts for end-users.</description></item><item><title>FAQ</title><link>https://machengine.org/about/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/faq/</guid><description>Frequently asked questions When will the engine be released? There won&amp;rsquo;t be one major event, rather it will be a bunch of small/incremental releases building up to it. You can look at the engine roadmap to get an idea of what we&amp;rsquo;re working on currently, and what will come later.
Can I use Mach to make a simple 2D game? Using the engine? Definitely not today.
Using Mach core, maybe:</description></item><item><title>fastfilter</title><link>https://machengine.org/pkg/fastfilter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/fastfilter/</guid><description>fastfilter Binary fuse &amp;amp; xor filters for Zig (faster and smaller than bloom filters)
GitHub repository | Issue tracker Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .fastfilter = .{ .url = &amp;#34;https://pkg.machengine.org/fastfilter/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler will instruct you to add a .hash = &amp;quot;.</description></item><item><title>Getting started</title><link>https://machengine.org/core/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/core/getting-started/</guid><description>Getting Started with Mach core Here you will learn how to use mach-core in your own project/repository. If you haven&amp;rsquo;t already, check out the examples as those describe how to actually use Mach core&amp;rsquo;s APIs, this page just describes project setup.
Option 1: Copying the starter project If you like, you can simply start by copying this starter project - where we ran through all the steps below for you.</description></item><item><title>GPU error handling</title><link>https://machengine.org/engine/gpu/errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/gpu/errors/</guid><description>GPU error handling Asynchronous nature GPUs have largely asynchronous APIs: you build up a command buffer which encodes a number of commands instructing the GPU to do something, and then you ask the GPU to execute that buffer of commands. As a result, errors must be handled asynchronously as well. try isn&amp;rsquo;t going to work here.
Error scopes WebGPU has a concept of error scopes, you can push an error scope onto the stack and pop an error scope.</description></item><item><title>GPU memory management</title><link>https://machengine.org/engine/gpu/memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/gpu/memory/</guid><description>GPU memory management Reference counting GPU objects like gpu.Texture, gpu.Buffer, or any other object which has a .reference, .release and .destroy method - use reference counting.
Although we love explicit memory management, GPU memory is perhaps one of the best use-cases for reference counting. All WebGPU objects are reference counted, and it&amp;rsquo;s not just because it originated as a browser API.
Guidance Use .reference() and .release() to release memory of objects.</description></item><item><title>Known issues</title><link>https://machengine.org/about/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/known-issues/</guid><description>Known issues If you&amp;rsquo;re trying to run the Mach examples or similar, you may be running into one of these known issues.
nixOS If you are using nixOS, we have tips on how to use Mach with it here.
Windows File not found If you encounter an error like this:
Windows does not have symlinks enabled, or Git is not configured to use them. This is very annoying and has been reported to Microsoft.</description></item><item><title>mach basisu</title><link>https://machengine.org/pkg/mach-basisu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-basisu/</guid><description>GitHub repository | Issue tracker basis universal (supercompressed textures) for Zig
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Tracking issue: https://github.com/hexops/mach/issues/965
Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):</description></item><item><title>mach dusk</title><link>https://machengine.org/pkg/mach-dusk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-dusk/</guid><description>This page has moved: Mach sysgpu</description></item><item><title>mach earcut</title><link>https://machengine.org/pkg/mach-earcut/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-earcut/</guid><description>No longer supported as an official Mach project. The code has moved to github.com/slimsag/mach-earcut and may not be maintained to the same standard as official Mach projects.
Additional details: https://github.com/hexops/mach/issues/967
View the older v0.2 documentation: https://machengine.org/v0.2/pkg/mach-earcut</description></item><item><title>mach ecs</title><link>https://machengine.org/pkg/mach-ecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-ecs/</guid><description>GitHub repository | Issue tracker The Mach entity component system, written from first-principles and designed for deep tooling capabilities.
Initially a 100% clean-room implementation, working from first-principles; later informed by research into how other open-source ECS work. Enable deep tooling to provide tracing, editors, visualizers, profilers, etc. Fast, optimal for CPU caches, multi-threaded, leverage comptime for type safety. Dynamic, allow for very flexible runtime capabilities. We&amp;rsquo;re publishing a blog series &amp;ldquo;Let&amp;rsquo;s build an Entity Component System from scatch&amp;rdquo; as we go.</description></item><item><title>mach flac</title><link>https://machengine.org/pkg/mach-flac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-flac/</guid><description>GitHub repository | Issue tracker FLAC audio decoding and encoding for Zig via the battle-hardened xiph.org libflac
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. Encoding &amp;amp; decoding support Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.</description></item><item><title>mach freetype</title><link>https://machengine.org/pkg/mach-freetype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-freetype/</guid><description>GitHub repository | Issue tracker Ziggified Freetype 2 bindings with zero-fuss installation, cross compilation, and more.
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. Very good API coverage, almost every function, type, constant, etc. has been exposed in a ziggified API. Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .</description></item><item><title>mach gamemode</title><link>https://machengine.org/pkg/mach-gamemode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-gamemode/</guid><description>GitHub repository | Issue tracker Make your Linux games go brrr
Enables Linux games written in Zig to request gamemode be enabled, opting in to various CPU, GPU, and kernel optimizations. If the user&amp;rsquo;s machine doesn&amp;rsquo;t have gamemode, it simply does nothing. There are no dependencies and your game will still run without it normally.
This is preferred as it means your game will automatically invoke gamemode for the user when running, rather than them having to manually enable it.</description></item><item><title>mach glfw</title><link>https://machengine.org/pkg/mach-glfw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-glfw/</guid><description>GitHub repository | Issue tracker Perfected GLFW bindings for Zig, with 100% API coverage, zero-fuss installation, cross compilation, and more.
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. 100% API coverage. Every function, type, constant, etc. has been exposed in a ziggified API. What does a ziggified GLFW API offer? Enums, always know what value a GLFW function can accept as everything is strictly typed.</description></item><item><title>mach gpu</title><link>https://machengine.org/pkg/mach-gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-gpu/</guid><description>GitHub repository | Issue tracker The WebGPU interface for Zig, featuring:
Zero-fuss installation, cross-compilation at the flip of a switch, and broad platform support. 100% API coverage. Every function, type, constant, etc. has been exposed in a ziggified API. Desktop, Steam Deck, (soon) web, and (future) mobile support. A modern graphics API similar to Metal, Vulkan, and DirectX 12. Cross-platform shading language Compute shaders Advanced GPU features where hardware support is available.</description></item><item><title>mach gpu-dawn</title><link>https://machengine.org/pkg/mach-gpu-dawn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-gpu-dawn/</guid><description>GitHub repository | Issue tracker Google&amp;rsquo;s Dawn WebGPU implementation, cross-compiled with Zig into a single static library, requiring nothing more than zig and git to build and cross-compile a static Dawn library for every OS:
No cmake No ninja No gn No system dependencies (xcode, etc.) Automagic cross compilation out of the box with nothing more than zig and git! Builds a single static libdawn.a Building from source This will take ~10 minutes to finish, so by default when using this package a prebuilt binary version of Dawn (see the &amp;lsquo;binary releases&amp;rsquo; section below) but you can always build Dawn from source using:</description></item><item><title>mach model3d</title><link>https://machengine.org/pkg/mach-model3d/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-model3d/</guid><description>GitHub repository | Issue tracker Compact, featureful model format &amp;amp; alternative to glTF.
Model3D is an up-and-coming compact, featureful, universal model format that tries to address the shortcomings of existing formats (yes, including glTF - see their rationale.)
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.</description></item><item><title>mach opus</title><link>https://machengine.org/pkg/mach-opus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-opus/</guid><description>GitHub repository | Issue tracker Opus audio decoding and encoding for Zig via the battle-hardened xiph.org libopus and libopusfile
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Tracking issue: https://github.com/hexops/mach/issues/961
Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):</description></item><item><title>mach sysaudio</title><link>https://machengine.org/pkg/mach-sysaudio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-sysaudio/</guid><description>GitHub repository | Issue tracker Truly cross-platform, low-level, audio IO in Zig - playback and recording with backends for:
Linux PulseAudio PipeWire Jack ALSA Windows: WASAPI macOS/iOS: CoreAudio WebAssembly: WebAudio Getting started Create a build.zig.zon in your project (replace LATEST_COMMIT with the latest commit hash):
.{ .name = &amp;#34;mypkg&amp;#34;, .version = &amp;#34;0.1.0&amp;#34;, .dependencies = .{ .mach_sysaudio = .{ .url = &amp;#34;https://pkg.machengine.org/mach-sysaudio/LATEST_COMMIT.tar.gz&amp;#34;, }, }, } Run zig build in your project, and the compiler will instruct you to add a .</description></item><item><title>mach sysgpu</title><link>https://machengine.org/pkg/mach-sysgpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-sysgpu/</guid><description>GitHub repository | Issue tracker Highly experimental, blazingly fast, lean &amp;amp; mean descendant of WebGPU written in Zig.
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Tracking issue: https://github.com/hexops/mach/issues/966
History We announced Dusk, a WebGPU implementation in Zig, as part of the Mach v0.</description></item><item><title>mach sysjs</title><link>https://machengine.org/pkg/mach-sysjs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/pkg/mach-sysjs/</guid><description>GitHub repository | Issue tracker Enables Zig &amp;lt;-&amp;gt; JS interoperability via code generation, with complex type support.
Experimental This is an experimental project according to our stability guarantees:
When a project has an experimental warning, it means all bets are off. You should carefully read the warning to understand why the project is experimental, and assume the worst.
Tracking issue: https://github.com/hexops/mach/issues/970</description></item><item><title>mach-gpu: the gpu.Interface for Zig</title><link>https://machengine.org/gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/gpu/</guid><description>This page has moved: Mach core examples</description></item><item><title>Matrix storage</title><link>https://machengine.org/engine/math/matrix-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/math/matrix-storage/</guid><description>Matrix storage Matrices in Mach use:
Column-major matrix storage Column-vectors (i.e. right-associative multiplication, matrix * vector = vector) The benefit of using this &amp;ldquo;OpenGL-style&amp;rdquo; matrix is that it matches the conventions accepted by the scientific community, it&amp;rsquo;s what you&amp;rsquo;ll find in linear algebra textbooks. It also matches WebGPU, Vulkan, Unity3D, etc. It does NOT match DirectX-style which e.g. Unreal Engine uses.
Note: many people will say &amp;ldquo;row major&amp;rdquo; or &amp;ldquo;column major&amp;rdquo; and implicitly mean three or more different concepts; to avoid confusion we&amp;rsquo;ll go over this in more depth below.</description></item><item><title>Migration notes</title><link>https://machengine.org/core/migrations/2023-core-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/core/migrations/2023-core-api/</guid><description>mach-core: v0.2 API redesign Mach v0.2 brought a complete redesign of the mach-core API. To upgrade your application, see the notes below.
See also the migration notes page.
Updating your application Previously, a complete Mach Core application looked something like this:
pub const App = @This(); pub fn init(app: *App, core: *mach.Core) !void { // ... } pub fn deinit(_: *App, _: *mach.Core) void {} pub fn update(app: *App, core: *mach.</description></item><item><title>nixOS usage</title><link>https://machengine.org/about/nixos-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/nixos-usage/</guid><description>Using Mach on nixOS If you use nixOS and want to use Mach, this document is for you.
usage via nix-ld (preferred, requires unstable) Use nix-ld following e.g. this article.
For example this shell:
with import &amp;lt;nixpkgs&amp;gt; {}; mkShell { NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.xorg.libX11 pkgs.vulkan-loader ]; NIX_LD = lib.fileContents &amp;#34;${stdenv.cc}/nix-support/dynamic-linker&amp;#34;; shellHook = &amp;#39;&amp;#39; export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH &amp;#39;&amp;#39;; } Then running zig build as usual:
zig build run-textured-cube Usage via shell { pkgs ?</description></item><item><title>Platform support</title><link>https://machengine.org/about/platforms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/platforms/</guid><description>Platform support We aim to support a broad array of operating systems and architectures, as long as they are reasonably used by desktop/mobile consumers, or someone would like to contribute and maintain support for them.
OS x86_64 aarch64 WebAssembly notes macOS ✅ ✅ last 3 major versions supported; Windows ✅ 🏃 windows 7+ supported; ARM support is WIP Linux ✅ ✅ SteamOS (deck) ✅ truly native (Vulkan); no controller/OS integration yet; demo video Browser 🏃 WebGPU not working; audio, input, recompile-on-reload, etc.</description></item><item><title>Project goals</title><link>https://machengine.org/about/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/goals/</guid><description>Mach project goals This page covers more broad project goals that apply to all Mach projects, code, standalone libraries, etc.
Engine goals See this page.
Zero-fuss installation All too often we see people get a sudden burst of inspiration: "I'm going to finally start my game/app this weekend!" only to see them utlimately get bogged down by setting up their dev environment, ending their weekend with "well.. at least I got the hello world running"</description></item><item><title>Stability</title><link>https://machengine.org/about/stability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/stability/</guid><description>What stability means to us We haven&amp;rsquo;t reached Mach 1 yet, but Mach encompasses many projects and some are more stable than others.
Area Stability Notes Engine Experimental We expect many things to change before Mach 1. Core Stable We expect some API breaking changes as we add support for more platforms, add small features, etc. Packages - Depends on the package, experimental packages will have a clear warning in the README.</description></item><item><title>Standard library</title><link>https://machengine.org/engine/stdlib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/engine/stdlib/</guid><description>Standard library The Mach standard library can be found at: github.com/hexops/mach - it is modular by design and you may choose to use depend on all of it, or just some of it.
Using mach.math as a separate library Let&amp;rsquo;s take for example mach.math, our math library. Unlike other gamedev math libraries which may try to support a bunch of different coordinate systems in order to support various graphics APIs, ours is specifically for Mach&amp;rsquo;s design goals.</description></item><item><title>Style guide</title><link>https://machengine.org/about/style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/style/</guid><description>Mach code style guide Use mach.testing where applicable In the main Mach repository we have the mach.testing module, which provides alternatives to std.testing equality methods with:
Less ambiguity about order of parameters Approximate absolute float equality by default Handling of vector and matrix types You should use mach.testing wherever it is accessible (without pulling in an additional dependency.)
usingnamespace is banned usingnamespace in general is banned from use in Mach code, because it allows one to &amp;lsquo;mixin&amp;rsquo; namespaces and tends to produce increasingly worse code quality over time.</description></item><item><title>Zig version</title><link>https://machengine.org/about/zig-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/zig-version/</guid><description>Supported Zig version Mach aims to follow the latest Zig nightly version, but is sometimes a week or so behind.
We update every Mach project every few weeks and in unison with one another, so that everything works and is being tested with a specific nightly version. That is the version you are expected to use.
Download the latest supported Zig version from our pkg.machengine.org mirror:
OS/Arch Kind Download mirror Linux x86_64 Binary zig-linux-x86_64-0.</description></item></channel></rss>