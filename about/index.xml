<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The project on Mach: zig game engine &amp; graphics toolkit</title><link>https://machengine.org/about/</link><description>Recent content in The project on Mach: zig game engine &amp; graphics toolkit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://machengine.org/about/index.xml" rel="self" type="application/rss+xml"/><item><title>FAQ</title><link>https://machengine.org/about/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/faq/</guid><description>Frequently asked questions When will the engine be released? There won&amp;rsquo;t be one major event, rather it will be a bunch of small/incremental releases building up to it. You can look at the engine roadmap to get an idea of what we&amp;rsquo;re working on currently, and what will come later.
Can I use Mach to make a simple 2D game? Using the engine? Definitely not today.
Using Mach core, maybe:</description></item><item><title>Known issues</title><link>https://machengine.org/about/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/known-issues/</guid><description>Known issues If you&amp;rsquo;re trying to run the Mach examples or similar, you may be running into one of these known issues.
nixOS If you are using nixOS, we have tips on how to use Mach with it here.
Windows File not found If you encounter an error like this:
Windows does not have symlinks enabled, or Git is not configured to use them. This is very annoying and has been reported to Microsoft.</description></item><item><title>nixOS usage</title><link>https://machengine.org/about/nixos-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/nixos-usage/</guid><description>Using Mach on nixOS If you use nixOS and want to use Mach, this document is for you.
usage via nix-ld (preferred, requires unstable) Use nix-ld following e.g. this article.
For example this shell:
with import &amp;lt;nixpkgs&amp;gt; {}; mkShell { NIX_LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.xorg.libX11 pkgs.vulkan-loader ]; NIX_LD = lib.fileContents &amp;#34;${stdenv.cc}/nix-support/dynamic-linker&amp;#34;; shellHook = &amp;#39;&amp;#39; export LD_LIBRARY_PATH=$NIX_LD_LIBRARY_PATH &amp;#39;&amp;#39;; } Then running zig build as usual:
zig build run-textured-cube Usage via shell { pkgs ?</description></item><item><title>Nominated Zig versions</title><link>https://machengine.org/about/nominated-zig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/nominated-zig/</guid><description>Nominated Zig versions Periodically we nominate a new Zig nightly version which all Mach projects target and use.
We encourage others to adopt the same Zig version Mach uses, since Zig packages which target latest nightly (or the latest stable release) will very often be incompatible otherwise.
Why nominated Zig versions, instead of nightly or stable? TL;DR: it&amp;rsquo;s a sweetspot between stable and nightly.
Stable releases occur just once or twice per year, nominated Zig versions occur several times per year - but not every day like nightly.</description></item><item><title>Platform support</title><link>https://machengine.org/about/platforms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/platforms/</guid><description>Platform support We aim to support a broad array of operating systems and architectures, as long as they are reasonably used by desktop/mobile consumers, or someone would like to contribute and maintain support for them.
OS x86_64 aarch64 WebAssembly notes macOS ‚úÖ ‚úÖ last 3 major versions supported; Windows ‚úÖ üèÉ windows 7+ supported; ARM support is WIP Linux ‚úÖ ‚úÖ SteamOS (deck) ‚úÖ truly native (Vulkan); no controller/OS integration yet; demo video Browser üèÉ WebGPU not working; audio, input, recompile-on-reload, etc.</description></item><item><title>Project goals</title><link>https://machengine.org/about/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/goals/</guid><description>Project goals This page covers more broad project goals that apply to all Mach projects, code, standalone libraries, etc.
Engine goals See this page.
Zero-fuss installation All too often we see people get a sudden burst of inspiration: "I'm going to finally start my game/app this weekend!" only to see them utlimately get bogged down by setting up their dev environment, ending their weekend with "well.. at least I got the hello world running"</description></item><item><title>Stability</title><link>https://machengine.org/about/stability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/stability/</guid><description>What stability means to us We haven&amp;rsquo;t reached Mach 1 yet, but Mach encompasses many projects and some are more stable than others.
Area Stability Notes Engine Experimental We expect many things to change before Mach 1. Core Stable We expect some API breaking changes as we add support for more platforms, add small features, etc. Packages - Depends on the package, experimental packages will have a clear warning in the README.</description></item><item><title>Style guide</title><link>https://machengine.org/about/style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/style/</guid><description>Style guide Use mach.testing where applicable In the main Mach repository we have the mach.testing module, which provides alternatives to std.testing equality methods with:
Less ambiguity about order of parameters Approximate absolute float equality by default Handling of vector and matrix types You should use mach.testing wherever it is accessible (without pulling in an additional dependency.)
usingnamespace is prohibited usingnamespace in general is prohibited from use in Mach code, it allows one to &amp;lsquo;mixin&amp;rsquo; namespaces and in our view tends to produce increasingly worse code quality over time.</description></item><item><title>Zig version</title><link>https://machengine.org/about/zig-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://machengine.org/about/zig-version/</guid><description>Zig version Mach nominates new Zig versions periodically, these are specific Zig nightly versions and what Mach is built and tested against. Other versions, such as stable or latest-nightly releases, are usually incompatible.
Mach nightly We encourage using Mach nightly (main, rather than a tagged release) for now.
Mach nightly is compatible with Zig 2024.1.0-mach
Version history Mach v0.2 Mach v0.2 is compatible with Zig v0.11. This was just by coincidence.</description></item></channel></rss>